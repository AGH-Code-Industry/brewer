{
  "api/Application.GameManager.html": {
    "href": "api/Application.GameManager.html",
    "title": "Class GameManager | Czasoport Documentation",
    "keywords": "Class GameManager Namespace Application public class GameManager : Singleton<GameManager> Inheritance object Singleton<GameManager> GameManager Inherited Members Singleton<GameManager>.I Singleton<GameManager>.Awake()"
  },
  "api/Application.StartupManager.html": {
    "href": "api/Application.StartupManager.html",
    "title": "Class StartupManager | Czasoport Documentation",
    "keywords": "Class StartupManager Namespace Application public class StartupManager : MonoBehaviour Inheritance object StartupManager"
  },
  "api/Application.html": {
    "href": "api/Application.html",
    "title": "Namespace Application | Czasoport Documentation",
    "keywords": "Namespace Application Classes GameManager StartupManager"
  },
  "api/CustomInput.CInput.html": {
    "href": "api/CustomInput.CInput.html",
    "title": "Class CInput | Czasoport Documentation",
    "keywords": "Class CInput Namespace CustomInput Wrapper for automatically generated InputActions. Provides easier access to reading values from input, takes care of processing for common input values. Incorporates locking mechanism if added in the project. public static class CInput Inheritance object CInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields InputActions InputActions object that CInput is based on. Should be used if there is no wrapper implemented by CInput. public static readonly InputActions InputActions Field Value InputActions Properties DormMousePosition Normal mouse position from InputActions. If you want point in game over which mouse is hovering, use MouseWorldPosition. public static Vector2 DormMousePosition { get; } Property Value Vector2 DormMouseWorldPosition Mouse position casted to world coordinates. public static Vector2 DormMouseWorldPosition { get; } Property Value Vector2 Run Whether player is running, and how fast he is running (effective on gamepads). public static float Run { get; } Property Value float TownNavigationAxis Vector2 desired player direction public static Vector2 TownNavigationAxis { get; } Property Value Vector2"
  },
  "api/CustomInput.Exceptions.NoMainCameraException.html": {
    "href": "api/CustomInput.Exceptions.NoMainCameraException.html",
    "title": "Class NoMainCameraException | Czasoport Documentation",
    "keywords": "Class NoMainCameraException Namespace CustomInput.Exceptions public class NoMainCameraException : Exception, ISerializable Inheritance object Exception NoMainCameraException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NoMainCameraException() public NoMainCameraException() NoMainCameraException(string) public NoMainCameraException(string message) Parameters message string NoMainCameraException(string, Exception) public NoMainCameraException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/CustomInput.Exceptions.html": {
    "href": "api/CustomInput.Exceptions.html",
    "title": "Namespace CustomInput.Exceptions | Czasoport Documentation",
    "keywords": "Namespace CustomInput.Exceptions Classes NoMainCameraException"
  },
  "api/CustomInput.InputActions.AlwaysEnabledActions.html": {
    "href": "api/CustomInput.InputActions.AlwaysEnabledActions.html",
    "title": "Struct InputActions.AlwaysEnabledActions | Czasoport Documentation",
    "keywords": "Struct InputActions.AlwaysEnabledActions Namespace CustomInput public struct InputActions.AlwaysEnabledActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AlwaysEnabledActions(InputActions) public AlwaysEnabledActions(InputActions wrapper) Parameters wrapper InputActions Properties Newaction public InputAction Newaction { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods AddCallbacks(IAlwaysEnabledActions) public void AddCallbacks(InputActions.IAlwaysEnabledActions instance) Parameters instance InputActions.IAlwaysEnabledActions Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap RemoveCallbacks(IAlwaysEnabledActions) public void RemoveCallbacks(InputActions.IAlwaysEnabledActions instance) Parameters instance InputActions.IAlwaysEnabledActions SetCallbacks(IAlwaysEnabledActions) public void SetCallbacks(InputActions.IAlwaysEnabledActions instance) Parameters instance InputActions.IAlwaysEnabledActions Operators implicit operator InputActionMap(AlwaysEnabledActions) public static implicit operator InputActionMap(InputActions.AlwaysEnabledActions set) Parameters set InputActions.AlwaysEnabledActions Returns InputActionMap"
  },
  "api/CustomInput.InputActions.DormitoryActions.html": {
    "href": "api/CustomInput.InputActions.DormitoryActions.html",
    "title": "Struct InputActions.DormitoryActions | Czasoport Documentation",
    "keywords": "Struct InputActions.DormitoryActions Namespace CustomInput public struct InputActions.DormitoryActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DormitoryActions(InputActions) public DormitoryActions(InputActions wrapper) Parameters wrapper InputActions Properties MousePosition public InputAction MousePosition { get; } Property Value InputAction PrimaryMouseClicked public InputAction PrimaryMouseClicked { get; } Property Value InputAction SecondaryMouseClicked public InputAction SecondaryMouseClicked { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods AddCallbacks(IDormitoryActions) public void AddCallbacks(InputActions.IDormitoryActions instance) Parameters instance InputActions.IDormitoryActions Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap RemoveCallbacks(IDormitoryActions) public void RemoveCallbacks(InputActions.IDormitoryActions instance) Parameters instance InputActions.IDormitoryActions SetCallbacks(IDormitoryActions) public void SetCallbacks(InputActions.IDormitoryActions instance) Parameters instance InputActions.IDormitoryActions Operators implicit operator InputActionMap(DormitoryActions) public static implicit operator InputActionMap(InputActions.DormitoryActions set) Parameters set InputActions.DormitoryActions Returns InputActionMap"
  },
  "api/CustomInput.InputActions.IAlwaysEnabledActions.html": {
    "href": "api/CustomInput.InputActions.IAlwaysEnabledActions.html",
    "title": "Interface InputActions.IAlwaysEnabledActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IAlwaysEnabledActions Namespace CustomInput public interface InputActions.IAlwaysEnabledActions Methods OnNewaction(CallbackContext) void OnNewaction(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/CustomInput.InputActions.IDormitoryActions.html": {
    "href": "api/CustomInput.InputActions.IDormitoryActions.html",
    "title": "Interface InputActions.IDormitoryActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IDormitoryActions Namespace CustomInput public interface InputActions.IDormitoryActions Methods OnMousePosition(CallbackContext) void OnMousePosition(InputAction.CallbackContext context) Parameters context CallbackContext OnPrimaryMouseClicked(CallbackContext) void OnPrimaryMouseClicked(InputAction.CallbackContext context) Parameters context CallbackContext OnSecondaryMouseClicked(CallbackContext) void OnSecondaryMouseClicked(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/CustomInput.InputActions.IPauseMenuActions.html": {
    "href": "api/CustomInput.InputActions.IPauseMenuActions.html",
    "title": "Interface InputActions.IPauseMenuActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IPauseMenuActions Namespace CustomInput public interface InputActions.IPauseMenuActions Methods OnNewaction(CallbackContext) void OnNewaction(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/CustomInput.InputActions.ITownActions.html": {
    "href": "api/CustomInput.InputActions.ITownActions.html",
    "title": "Interface InputActions.ITownActions | Czasoport Documentation",
    "keywords": "Interface InputActions.ITownActions Namespace CustomInput public interface InputActions.ITownActions Methods OnNavigation(CallbackContext) void OnNavigation(InputAction.CallbackContext context) Parameters context CallbackContext OnRun(CallbackContext) void OnRun(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/CustomInput.InputActions.PauseMenuActions.html": {
    "href": "api/CustomInput.InputActions.PauseMenuActions.html",
    "title": "Struct InputActions.PauseMenuActions | Czasoport Documentation",
    "keywords": "Struct InputActions.PauseMenuActions Namespace CustomInput public struct InputActions.PauseMenuActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PauseMenuActions(InputActions) public PauseMenuActions(InputActions wrapper) Parameters wrapper InputActions Properties Newaction public InputAction Newaction { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods AddCallbacks(IPauseMenuActions) public void AddCallbacks(InputActions.IPauseMenuActions instance) Parameters instance InputActions.IPauseMenuActions Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap RemoveCallbacks(IPauseMenuActions) public void RemoveCallbacks(InputActions.IPauseMenuActions instance) Parameters instance InputActions.IPauseMenuActions SetCallbacks(IPauseMenuActions) public void SetCallbacks(InputActions.IPauseMenuActions instance) Parameters instance InputActions.IPauseMenuActions Operators implicit operator InputActionMap(PauseMenuActions) public static implicit operator InputActionMap(InputActions.PauseMenuActions set) Parameters set InputActions.PauseMenuActions Returns InputActionMap"
  },
  "api/CustomInput.InputActions.TownActions.html": {
    "href": "api/CustomInput.InputActions.TownActions.html",
    "title": "Struct InputActions.TownActions | Czasoport Documentation",
    "keywords": "Struct InputActions.TownActions Namespace CustomInput public struct InputActions.TownActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TownActions(InputActions) public TownActions(InputActions wrapper) Parameters wrapper InputActions Properties Navigation public InputAction Navigation { get; } Property Value InputAction Run public InputAction Run { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods AddCallbacks(ITownActions) public void AddCallbacks(InputActions.ITownActions instance) Parameters instance InputActions.ITownActions Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap RemoveCallbacks(ITownActions) public void RemoveCallbacks(InputActions.ITownActions instance) Parameters instance InputActions.ITownActions SetCallbacks(ITownActions) public void SetCallbacks(InputActions.ITownActions instance) Parameters instance InputActions.ITownActions Operators implicit operator InputActionMap(TownActions) public static implicit operator InputActionMap(InputActions.TownActions set) Parameters set InputActions.TownActions Returns InputActionMap"
  },
  "api/CustomInput.InputActions.html": {
    "href": "api/CustomInput.InputActions.html",
    "title": "Class InputActions | Czasoport Documentation",
    "keywords": "Class InputActions Namespace CustomInput public class InputActions : IInputActionCollection2, IDisposable Inheritance object InputActions Implements IDisposable Constructors InputActions() public InputActions() Properties AlwaysEnabled public InputActions.AlwaysEnabledActions AlwaysEnabled { get; } Property Value InputActions.AlwaysEnabledActions Dormitory public InputActions.DormitoryActions Dormitory { get; } Property Value InputActions.DormitoryActions PauseMenu public InputActions.PauseMenuActions PauseMenu { get; } Property Value InputActions.PauseMenuActions Town public InputActions.TownActions Town { get; } Property Value InputActions.TownActions asset public InputActionAsset asset { get; } Property Value InputActionAsset bindingMask public InputBinding? bindingMask { get; set; } Property Value InputBinding? bindings public IEnumerable<InputBinding> bindings { get; } Property Value IEnumerable<InputBinding> controlSchemes public ReadOnlyArray<InputControlScheme> controlSchemes { get; } Property Value ReadOnlyArray<InputControlScheme> devices public ReadOnlyArray<InputDevice>? devices { get; set; } Property Value ReadOnlyArray<InputDevice>? Methods Contains(InputAction) public bool Contains(InputAction action) Parameters action InputAction Returns bool Disable() public void Disable() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Enable() public void Enable() FindAction(string, bool) public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false) Parameters actionNameOrId string throwIfNotFound bool Returns InputAction FindBinding(InputBinding, out InputAction) public int FindBinding(InputBinding bindingMask, out InputAction action) Parameters bindingMask InputBinding action InputAction Returns int GetEnumerator() public IEnumerator<InputAction> GetEnumerator() Returns IEnumerator<InputAction>"
  },
  "api/CustomInput.html": {
    "href": "api/CustomInput.html",
    "title": "Namespace CustomInput | Czasoport Documentation",
    "keywords": "Namespace CustomInput Classes CInput Wrapper for automatically generated InputActions. Provides easier access to reading values from input, takes care of processing for common input values. Incorporates locking mechanism if added in the project. InputActions Structs InputActions.AlwaysEnabledActions InputActions.DormitoryActions InputActions.PauseMenuActions InputActions.TownActions Interfaces InputActions.IAlwaysEnabledActions InputActions.IDormitoryActions InputActions.IPauseMenuActions InputActions.ITownActions"
  },
  "api/DataPersistence.Data.DormitoryData.html": {
    "href": "api/DataPersistence.Data.DormitoryData.html",
    "title": "Class DormitoryData | Czasoport Documentation",
    "keywords": "Class DormitoryData Namespace DataPersistence.Data [Serializable] public class DormitoryData Inheritance object DormitoryData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DataPersistence.Data.GameData.html": {
    "href": "api/DataPersistence.Data.GameData.html",
    "title": "Class GameData | Czasoport Documentation",
    "keywords": "Class GameData Namespace DataPersistence.Data [Serializable] public class GameData Inheritance object GameData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields currentPlace public PlaceType currentPlace Field Value PlaceType dormData public DormitoryData dormData Field Value DormitoryData inventoryData public InventoryData inventoryData Field Value InventoryData isDefaultData public bool isDefaultData Field Value bool orderData public OrderData orderData Field Value OrderData townData public TownData townData Field Value TownData"
  },
  "api/DataPersistence.Data.InventoryData.html": {
    "href": "api/DataPersistence.Data.InventoryData.html",
    "title": "Class InventoryData | Czasoport Documentation",
    "keywords": "Class InventoryData Namespace DataPersistence.Data [Serializable] public class InventoryData Inheritance object InventoryData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Items public List<(string, ushort)> Items Field Value List<(string, ushort)>"
  },
  "api/DataPersistence.Data.OrderData.html": {
    "href": "api/DataPersistence.Data.OrderData.html",
    "title": "Class OrderData | Czasoport Documentation",
    "keywords": "Class OrderData Namespace DataPersistence.Data [Serializable] public class OrderData Inheritance object OrderData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DataPersistence.Data.TownData.html": {
    "href": "api/DataPersistence.Data.TownData.html",
    "title": "Class TownData | Czasoport Documentation",
    "keywords": "Class TownData Namespace DataPersistence.Data [Serializable] public class TownData Inheritance object TownData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DataPersistence.Data.html": {
    "href": "api/DataPersistence.Data.html",
    "title": "Namespace DataPersistence.Data | Czasoport Documentation",
    "keywords": "Namespace DataPersistence.Data Classes DormitoryData GameData InventoryData OrderData TownData"
  },
  "api/DataPersistence.DataPersistenceManager.html": {
    "href": "api/DataPersistence.DataPersistenceManager.html",
    "title": "Class DataPersistenceManager | Czasoport Documentation",
    "keywords": "Class DataPersistenceManager Namespace DataPersistence public class DataPersistenceManager : Singleton<DataPersistenceManager> Inheritance object Singleton<DataPersistenceManager> DataPersistenceManager Inherited Members Singleton<DataPersistenceManager>.I Singleton<DataPersistenceManager>.Awake() Fields GameData [NonSerialized] public GameData GameData Field Value GameData Methods CreateNewGame() public void CreateNewGame() LoadSave(string) public void LoadSave(string saveName) Parameters saveName string SaveGame(string) public void SaveGame(string saveName) Parameters saveName string"
  },
  "api/DataPersistence.FileDataHandler.html": {
    "href": "api/DataPersistence.FileDataHandler.html",
    "title": "Class FileDataHandler | Czasoport Documentation",
    "keywords": "Class FileDataHandler Namespace DataPersistence public class FileDataHandler Inheritance object FileDataHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileDataHandler(string) public FileDataHandler(string saveDirectory) Parameters saveDirectory string Methods Load(string) public GameData Load(string saveName) Parameters saveName string Returns GameData Save(GameData, string) public bool Save(GameData gameData, string saveName) Parameters gameData GameData saveName string Returns bool"
  },
  "api/DataPersistence.IDataPersistence.html": {
    "href": "api/DataPersistence.IDataPersistence.html",
    "title": "Interface IDataPersistence | Czasoport Documentation",
    "keywords": "Interface IDataPersistence Namespace DataPersistence public interface IDataPersistence Methods LoadPersistentData(GameData) void LoadPersistentData(GameData gameData) Parameters gameData GameData SavePersistentData(ref GameData) void SavePersistentData(ref GameData gameData) Parameters gameData GameData"
  },
  "api/DataPersistence.html": {
    "href": "api/DataPersistence.html",
    "title": "Namespace DataPersistence | Czasoport Documentation",
    "keywords": "Namespace DataPersistence Classes DataPersistenceManager FileDataHandler Interfaces IDataPersistence"
  },
  "api/InventoryBackend.Exceptions.InvBadValueException.html": {
    "href": "api/InventoryBackend.Exceptions.InvBadValueException.html",
    "title": "Class InvBadValueException | Czasoport Documentation",
    "keywords": "Class InvBadValueException Namespace InventoryBackend.Exceptions public class InvBadValueException : Exception, ISerializable Inheritance object Exception InvBadValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvBadValueException() public InvBadValueException() InvBadValueException(string) public InvBadValueException(string message) Parameters message string InvBadValueException(string, Exception) public InvBadValueException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/InventoryBackend.Exceptions.html": {
    "href": "api/InventoryBackend.Exceptions.html",
    "title": "Namespace InventoryBackend.Exceptions | Czasoport Documentation",
    "keywords": "Namespace InventoryBackend.Exceptions Classes InvBadValueException"
  },
  "api/InventoryBackend.Inventory.html": {
    "href": "api/InventoryBackend.Inventory.html",
    "title": "Class Inventory | Czasoport Documentation",
    "keywords": "Class Inventory Namespace InventoryBackend public class Inventory : Singleton<Inventory>, IDataPersistence Inheritance object Singleton<Inventory> Inventory Implements IDataPersistence Inherited Members Singleton<Inventory>.I Singleton<Inventory>.Awake() Fields inventoryUpdated Fires always when content of inventory changes. public UnityEvent inventoryUpdated Field Value UnityEvent Methods GetAllItems() Get all items stored in inventory. public Dictionary<ItemDefinition, ushort> GetAllItems() Returns Dictionary<ItemDefinition, ushort> GetItemCount(ItemDefinition) How many of specific item does player has. public ushort GetItemCount(ItemDefinition item) Parameters item ItemDefinition Item to check. Returns ushort Number of items of this type in inventory. InsertItem(ItemDefinition, ushort) Inserts new item into inventory or updates count of this item in the inventory. public void InsertItem(ItemDefinition item, ushort count) Parameters item ItemDefinition What item to put into the inventory. count ushort How many items to put into the inventory. LoadPersistentData(GameData) public void LoadPersistentData(GameData gameData) Parameters gameData GameData RemoveItem(ItemDefinition, ushort) Remove specific count of items from the inventory. Count cannot be less than stored amount of items. When number of items after the operation drops to 0, item will be removed. public bool RemoveItem(ItemDefinition item, ushort count) Parameters item ItemDefinition What item to remove. count ushort How many items to remove. Returns bool True if operation was successful and items were removed, false if number of items requested to remove was greater than number of stored items or in case of any other failure. Exceptions InvBadValueException SavePersistentData(ref GameData) public void SavePersistentData(ref GameData gameData) Parameters gameData GameData"
  },
  "api/InventoryBackend.Test.TestInventory.html": {
    "href": "api/InventoryBackend.Test.TestInventory.html",
    "title": "Class TestInventory | Czasoport Documentation",
    "keywords": "Class TestInventory Namespace InventoryBackend.Test public class TestInventory : MonoBehaviour Inheritance object TestInventory Fields item1 public ItemDefinition item1 Field Value ItemDefinition item2 public ItemDefinition item2 Field Value ItemDefinition testLoad public bool testLoad Field Value bool testSave public bool testSave Field Value bool"
  },
  "api/InventoryBackend.Test.html": {
    "href": "api/InventoryBackend.Test.html",
    "title": "Namespace InventoryBackend.Test | Czasoport Documentation",
    "keywords": "Namespace InventoryBackend.Test Classes TestInventory"
  },
  "api/InventoryBackend.html": {
    "href": "api/InventoryBackend.html",
    "title": "Namespace InventoryBackend | Czasoport Documentation",
    "keywords": "Namespace InventoryBackend Classes Inventory"
  },
  "api/InventoryUI.InventoryUI.html": {
    "href": "api/InventoryUI.InventoryUI.html",
    "title": "Class InventoryUI | Czasoport Documentation",
    "keywords": "Class InventoryUI Namespace InventoryUI public class InventoryUI : MonoBehaviour Inheritance object InventoryUI Methods OnInventoryUpdated() public void OnInventoryUpdated()"
  },
  "api/InventoryUI.html": {
    "href": "api/InventoryUI.html",
    "title": "Namespace InventoryUI | Czasoport Documentation",
    "keywords": "Namespace InventoryUI Classes InventoryUI"
  },
  "api/Items.ItemDefinition.html": {
    "href": "api/Items.ItemDefinition.html",
    "title": "Class ItemDefinition | Czasoport Documentation",
    "keywords": "Class ItemDefinition Namespace Items public class ItemDefinition : ScriptableObject Inheritance object ItemDefinition Fields description public string description Field Value string itemName public string itemName Field Value string prefab public GameObject prefab Field Value GameObject type public ItemType type Field Value ItemType uiImage public Sprite uiImage Field Value Sprite Methods ToString() public override string ToString() Returns string"
  },
  "api/Items.ItemType.html": {
    "href": "api/Items.ItemType.html",
    "title": "Enum ItemType | Czasoport Documentation",
    "keywords": "Enum ItemType Namespace Items public enum ItemType Fields Beer = 0 Ingredient = 1"
  },
  "api/Items.html": {
    "href": "api/Items.html",
    "title": "Namespace Items | Czasoport Documentation",
    "keywords": "Namespace Items Classes ItemDefinition Enums ItemType"
  },
  "api/MainMenu.MainMenuManager.html": {
    "href": "api/MainMenu.MainMenuManager.html",
    "title": "Class MainMenuManager | Czasoport Documentation",
    "keywords": "Class MainMenuManager Namespace MainMenu public class MainMenuManager : Singleton<MainMenuManager> Inheritance object Singleton<MainMenuManager> MainMenuManager Inherited Members Singleton<MainMenuManager>.I Methods Awake() protected override void Awake()"
  },
  "api/MainMenu.html": {
    "href": "api/MainMenu.html",
    "title": "Namespace MainMenu | Czasoport Documentation",
    "keywords": "Namespace MainMenu Classes MainMenuManager"
  },
  "api/Settings.AppSettingsDefinition.html": {
    "href": "api/Settings.AppSettingsDefinition.html",
    "title": "Class AppSettingsDefinition | Czasoport Documentation",
    "keywords": "Class AppSettingsDefinition Namespace Settings public class AppSettingsDefinition : ScriptableObject Inheritance object AppSettingsDefinition Fields defaultSaveName public string defaultSaveName Field Value string dormitorySceneName public string dormitorySceneName Field Value string firstSceneName public string firstSceneName Field Value string gameManagerSceneName public string gameManagerSceneName Field Value string itemsResPath public string itemsResPath Field Value string mainMenuSceneName public string mainMenuSceneName Field Value string townSceneName public string townSceneName Field Value string"
  },
  "api/Settings.DefaultSaveDataDefinition.html": {
    "href": "api/Settings.DefaultSaveDataDefinition.html",
    "title": "Class DefaultSaveDataDefinition | Czasoport Documentation",
    "keywords": "Class DefaultSaveDataDefinition Namespace Settings Settings for entire application that defines variables for startup, core processes and shutdown public class DefaultSaveDataDefinition : ScriptableObject Inheritance object DefaultSaveDataDefinition Fields currentPlace public PlaceType currentPlace Field Value PlaceType"
  },
  "api/Settings.DevSet.html": {
    "href": "api/Settings.DevSet.html",
    "title": "Class DevSet | Czasoport Documentation",
    "keywords": "Class DevSet Namespace Settings public class DevSet : Singleton<DevSet> Inheritance object Singleton<DevSet> DevSet Inherited Members Singleton<DevSet>.I Singleton<DevSet>.Awake() Fields appSettings public AppSettingsDefinition appSettings Field Value AppSettingsDefinition defSaveData public DefaultSaveDataDefinition defSaveData Field Value DefaultSaveDataDefinition townSettings public TownSettingsDefinition townSettings Field Value TownSettingsDefinition"
  },
  "api/Settings.TownSettingsDefinition.html": {
    "href": "api/Settings.TownSettingsDefinition.html",
    "title": "Class TownSettingsDefinition | Czasoport Documentation",
    "keywords": "Class TownSettingsDefinition Namespace Settings public class TownSettingsDefinition : ScriptableObject Inheritance object TownSettingsDefinition Fields interactionRadius public float interactionRadius Field Value float movementSpeed public float movementSpeed Field Value float"
  },
  "api/Settings.html": {
    "href": "api/Settings.html",
    "title": "Namespace Settings | Czasoport Documentation",
    "keywords": "Namespace Settings Classes AppSettingsDefinition DefaultSaveDataDefinition Settings for entire application that defines variables for startup, core processes and shutdown DevSet TownSettingsDefinition"
  },
  "api/Town.CameraFollowPlayerComponent.html": {
    "href": "api/Town.CameraFollowPlayerComponent.html",
    "title": "Class CameraFollowPlayerComponent | Czasoport Documentation",
    "keywords": "Class CameraFollowPlayerComponent Namespace Town public class CameraFollowPlayerComponent : MonoBehaviour Inheritance object CameraFollowPlayerComponent Fields player public Transform player Field Value Transform"
  },
  "api/Town.IInteractable.html": {
    "href": "api/Town.IInteractable.html",
    "title": "Interface IInteractable | Czasoport Documentation",
    "keywords": "Interface IInteractable Namespace Town public interface IInteractable Methods EnteredInteractionRange() void EnteredInteractionRange() LeftInteractionRange() void LeftInteractionRange()"
  },
  "api/Town.PlayerInteractions.html": {
    "href": "api/Town.PlayerInteractions.html",
    "title": "Class PlayerInteractions | Czasoport Documentation",
    "keywords": "Class PlayerInteractions Namespace Town public class PlayerInteractions : MonoBehaviour Inheritance object PlayerInteractions"
  },
  "api/Town.PlayerMovementComponent.html": {
    "href": "api/Town.PlayerMovementComponent.html",
    "title": "Class PlayerMovementComponent | Czasoport Documentation",
    "keywords": "Class PlayerMovementComponent Namespace Town public class PlayerMovementComponent : MonoBehaviour Inheritance object PlayerMovementComponent"
  },
  "api/Town.Town.TrashCan.html": {
    "href": "api/Town.Town.TrashCan.html",
    "title": "Class TrashCan | Czasoport Documentation",
    "keywords": "Class TrashCan Namespace Town.Town public class TrashCan : MonoBehaviour, IInteractable Inheritance object TrashCan Implements IInteractable Methods EnteredInteractionRange() public void EnteredInteractionRange() LeftInteractionRange() public void LeftInteractionRange()"
  },
  "api/Town.Town.html": {
    "href": "api/Town.Town.html",
    "title": "Namespace Town.Town | Czasoport Documentation",
    "keywords": "Namespace Town.Town Classes TrashCan"
  },
  "api/Town.html": {
    "href": "api/Town.html",
    "title": "Namespace Town | Czasoport Documentation",
    "keywords": "Namespace Town Classes CameraFollowPlayerComponent PlayerInteractions PlayerMovementComponent Interfaces IInteractable"
  },
  "api/Utils.Attributes.ObjectIdentifierAttribute.html": {
    "href": "api/Utils.Attributes.ObjectIdentifierAttribute.html",
    "title": "Class ObjectIdentifierAttribute | Czasoport Documentation",
    "keywords": "Class ObjectIdentifierAttribute Namespace Utils.Attributes public class ObjectIdentifierAttribute : PropertyAttribute Inheritance object ObjectIdentifierAttribute"
  },
  "api/Utils.Attributes.ObjectIdentifierDrawer.html": {
    "href": "api/Utils.Attributes.ObjectIdentifierDrawer.html",
    "title": "Class ObjectIdentifierDrawer | Czasoport Documentation",
    "keywords": "Class ObjectIdentifierDrawer Namespace Utils.Attributes public class ObjectIdentifierDrawer : PropertyDrawer Inheritance object ObjectIdentifierDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters property SerializedProperty label GUIContent Returns float OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect property SerializedProperty label GUIContent"
  },
  "api/Utils.Attributes.ReadOnlyAttribute.html": {
    "href": "api/Utils.Attributes.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | Czasoport Documentation",
    "keywords": "Class ReadOnlyAttribute Namespace Utils.Attributes public class ReadOnlyAttribute : PropertyAttribute Inheritance object ReadOnlyAttribute"
  },
  "api/Utils.Attributes.ReadOnlyDrawer.html": {
    "href": "api/Utils.Attributes.ReadOnlyDrawer.html",
    "title": "Class ReadOnlyDrawer | Czasoport Documentation",
    "keywords": "Class ReadOnlyDrawer Namespace Utils.Attributes public class ReadOnlyDrawer : PropertyDrawer Inheritance object ReadOnlyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters property SerializedProperty label GUIContent Returns float OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect property SerializedProperty label GUIContent"
  },
  "api/Utils.Attributes.html": {
    "href": "api/Utils.Attributes.html",
    "title": "Namespace Utils.Attributes | Czasoport Documentation",
    "keywords": "Namespace Utils.Attributes Classes ObjectIdentifierAttribute ObjectIdentifierDrawer ReadOnlyAttribute ReadOnlyDrawer"
  },
  "api/Utils.DoNotDestroy.html": {
    "href": "api/Utils.DoNotDestroy.html",
    "title": "Class DoNotDestroy | Czasoport Documentation",
    "keywords": "Class DoNotDestroy Namespace Utils public class DoNotDestroy : MonoBehaviour Inheritance object DoNotDestroy"
  },
  "api/Utils.Globals.PlaceType.html": {
    "href": "api/Utils.Globals.PlaceType.html",
    "title": "Enum PlaceType | Czasoport Documentation",
    "keywords": "Enum PlaceType Namespace Utils.Globals public enum PlaceType Fields Dormitory = 0 Town = 1"
  },
  "api/Utils.Globals.html": {
    "href": "api/Utils.Globals.html",
    "title": "Namespace Utils.Globals | Czasoport Documentation",
    "keywords": "Namespace Utils.Globals Enums PlaceType"
  },
  "api/Utils.Loggers.LoggerType.html": {
    "href": "api/Utils.Loggers.LoggerType.html",
    "title": "Enum Loggers.LoggerType | Czasoport Documentation",
    "keywords": "Enum Loggers.LoggerType Namespace Utils public enum Loggers.LoggerType Fields APPLICATION = 1 DATA_PERSISTENCE = 2 INVENTORY = 3 UTILS = 0"
  },
  "api/Utils.Loggers.html": {
    "href": "api/Utils.Loggers.html",
    "title": "Class Loggers | Czasoport Documentation",
    "keywords": "Class Loggers Namespace Utils public static class Loggers Inheritance object Loggers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields LoggersList public static Dictionary<Loggers.LoggerType, CLogger> LoggersList Field Value Dictionary<Loggers.LoggerType, CLogger>"
  },
  "api/Utils.Singleton.Singleton-1.html": {
    "href": "api/Utils.Singleton.Singleton-1.html",
    "title": "Class Singleton<T> | Czasoport Documentation",
    "keywords": "Class Singleton<T> Namespace Utils.Singleton public class Singleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters T Inheritance object Singleton<T> Derived GameManager DataPersistenceManager Inventory MainMenuManager DevSet Properties I public static T I { get; } Property Value T Methods Awake() protected virtual void Awake()"
  },
  "api/Utils.Singleton.SingletonOverrideException.html": {
    "href": "api/Utils.Singleton.SingletonOverrideException.html",
    "title": "Class SingletonOverrideException | Czasoport Documentation",
    "keywords": "Class SingletonOverrideException Namespace Utils.Singleton public class SingletonOverrideException : Exception, ISerializable Inheritance object Exception SingletonOverrideException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SingletonOverrideException() public SingletonOverrideException() SingletonOverrideException(string) public SingletonOverrideException(string message) Parameters message string SingletonOverrideException(string, Exception) public SingletonOverrideException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/Utils.Singleton.html": {
    "href": "api/Utils.Singleton.html",
    "title": "Namespace Utils.Singleton | Czasoport Documentation",
    "keywords": "Namespace Utils.Singleton Classes SingletonOverrideException Singleton<T>"
  },
  "api/Utils.Statistics.StatOperation.html": {
    "href": "api/Utils.Statistics.StatOperation.html",
    "title": "Enum StatOperation | Czasoport Documentation",
    "keywords": "Enum StatOperation Namespace Utils.Statistics public enum StatOperation Fields Addition = 0 Multiplication = 1"
  },
  "api/Utils.Statistics.Statistic.html": {
    "href": "api/Utils.Statistics.Statistic.html",
    "title": "Class Statistic | Czasoport Documentation",
    "keywords": "Class Statistic Namespace Utils.Statistics public class Statistic Inheritance object Statistic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Statistic(string, float, float, float) public Statistic(string name, float defaultValue, float min, float max) Parameters name string defaultValue float min float max float Properties Value public float Value { get; set; } Property Value float Methods AddModifier(StatOperation, float, string) public string AddModifier(StatOperation operation, float value, string identifier = null) Parameters operation StatOperation value float identifier string Returns string RemoveModifier(string) public void RemoveModifier(string identifier) Parameters identifier string Operators implicit operator float(Statistic) public static implicit operator float(Statistic statistic) Parameters statistic Statistic Returns float"
  },
  "api/Utils.Statistics.html": {
    "href": "api/Utils.Statistics.html",
    "title": "Namespace Utils.Statistics | Czasoport Documentation",
    "keywords": "Namespace Utils.Statistics Classes Statistic Enums StatOperation"
  },
  "api/Utils.UniqueScriptableObject.html": {
    "href": "api/Utils.UniqueScriptableObject.html",
    "title": "Class UniqueScriptableObject | Czasoport Documentation",
    "keywords": "Class UniqueScriptableObject Namespace Utils public class UniqueScriptableObject : ScriptableObject Inheritance object UniqueScriptableObject Fields uniqueId public string uniqueId Field Value string Methods GenerateUniqueId() public void GenerateUniqueId()"
  },
  "api/Utils.html": {
    "href": "api/Utils.html",
    "title": "Namespace Utils | Czasoport Documentation",
    "keywords": "Namespace Utils Classes DoNotDestroy Loggers UniqueScriptableObject Enums Loggers.LoggerType"
  },
  "gdd/fabula/fabula.html": {
    "href": "gdd/fabula/fabula.html",
    "title": "Fabuła | Czasoport Documentation",
    "keywords": "Fabuła Motyw Jesteś biednym studentem alkoholikiem który jedyny cel jaki sobie wyznaczył na studiach to za wszelką cenę zdanie, i przy okazji takie tam upichcenie niebiańskiego trunku którego nikt jeszcze nie osiągnął. Główna Historia Legendy głoszą, iż dawno temu żył sobie student, który posiadał niewyobrażalną dla zwykłego śmiertelnika wiedzę o browarach. Potrafił z niczego wyczarować trunek który zadowolił niejednego konesera. Podobno student po wypiciu jego wytworu dostawał boost do inteligencji, odwagi i szczęścia. Tajemniczy żak okrzyknięty został zaklinaczem chmielu, a czasy jego działania nazywane były przez studentów „złotą” erą. Od zawsze marzył on, aby stworzyć napój doskonały – taki który kopie jak rasowy ogier, a jednocześnie dostarcza nieziemskich wrażeń smakowych. Po wielu latach zdobył wszystkie potrzebne składniki i wystarczającą wiedzę do stworzenia tego arcydzieła, jednak proces (niezwykle niebezpieczny) nie poszedł po jego myśli i był fatalny w skutkach. Po tym wydarzeniu słuch po nim zaginął i nikt nie wie do dziś co się z nim stało. Od tego momentu społeczność studencka popadła w marazm, a co gorsza - zdawalność kolosów i egzaminów drastycznie spadła. Los wszystkich studentów spoczywa na twoich dłoniach! A no tak, sam chcesz się upić w trupa, nieważne... Progresja Historii Student odnajduje zapiski z pamiętnika zaklinacza (z początku swego rodzaju tutorial/wprowadzenie do mechanik, później delkatne wskazówki do browarnictwa i fabuły) które stanowią dla niego podstawę do osiągnięcia swojego celu. Gracz pozyskuje przedmioty poprzez zbieranie, wymiany z innymi studentami, zakupy w sklepie itp. Miejsca Akcji akademik, pokój, kuchnia uczelnia, sale wykładowe, laboratoria kampus, sklepy, boiska, siłownie Lore Myślę, że dobrym pomysłem będzie, gdy gracz dowie się w trakcie, że zaklinaczem był jego ojciec/brat/inny istotny członek rodziny, co jeszcze bardziej zdeterminuje go w jego działaniach."
  },
  "gdd/grafika/grafika.html": {
    "href": "gdd/grafika/grafika.html",
    "title": "Grafika | Czasoport Documentation",
    "keywords": "Grafika Grafiki Koncepcyjne Świata ... Grafiki Koncepcyjne Postaci Postać 1 Szkic Postaci lub model ... Animacja ... Grafiki Koncepcyjne Wrogów Wróg 1 Szkic Wroga lub model ... Animacja ... ... Grafiki Interfejsu Użytkownika ... Tekstury ... Użyte Shadery ..."
  },
  "gdd/interfejs/interfejs.html": {
    "href": "gdd/interfejs/interfejs.html",
    "title": "Interfejs Użytkownika | Czasoport Documentation",
    "keywords": "Interfejs Użytkownika Podczas gry - minimalistyczny, casualowy interfejs (taski, data, minimalistyczne staty np. głodu, snu, promili we krwi) Podczas craftingu - bardziej zaawansowany interfejs, mimo wszystko nadal minimalistyczny (po bokach do wyciągnięcia ekwipunek, notatki zaklinacza) Rozgrywka Szkic interfejsu gry Jak wiele zakrywa interfejs użytkownika Około 10-20% ekranu, tak aby gracz zbytnio nie rozpraszał się podczas gry Jakie Statystyki będą wyświetlane i gdzie Głód, sen, promile. Na dole ekranu. Jakie zdarzenia mają się wykonywać po naciśnięciu odpowiednich przycisków ... Szkic interfejsu craftingu IDLE EKWIPUNEK NOTATKI Jak wiele zakrywa interfejs użytkownika Około 10% ekranu przed rozwinięciem, znaczna większość po rozwinięciu Menu Szkic interfejsu ... Jakie zdarzenia mają się wykonywać po naciśnięciu odpowiednich przycisków ... Sklep ..."
  },
  "gdd/marketing/marketing_monetyzacja.html": {
    "href": "gdd/marketing/marketing_monetyzacja.html",
    "title": "Marketing i Monetyzacja | Czasoport Documentation",
    "keywords": "Marketing i Monetyzacja Rodzaj Dystrybucji: Darmowa, Płatna ... Grupa Docelowa Zakres grupy ... Do kogo zwracamy się z naszą ofertą ... Czemu nie da się zwiększyć grupy docelowej ... Platformy wydania Gry PC Wielkość grupy docelowej ... Cena Produktu ... ... Jak i Gdzie gra zostanie upubliczniona Lista Platform Google Facebook ... W jaki sposób zamierzamy reklamować Grę ... Maksymalna ilość środków przeznaczona na Reklamę ... Szacunek Odniesionych z niech przychodów ..."
  },
  "gdd/muzyka/muzyka.html": {
    "href": "gdd/muzyka/muzyka.html",
    "title": "Muzyka | Czasoport Documentation",
    "keywords": "Muzyka Jak na grę RPG przystało, podchodząca pod 8-bit. Chciałbym osiągnąć efekt podobny do tego, jaki Toby Fox uzyskał w Undertale/Deltarune. Muzyka podczas rozgrywki Muzyka odpowiednia do akcji. Spokojna podczas standardowej gry, casualowa/\"epicka\" podczas craftu, bardziej dynamiczna podczas ważniejszych wyborów. Dźwięki efektów środowiskowych W akademiku - cisza i spokój, czasem słychać jakieś szurnięcie krzesłem, tupnięcie, bardzo rzadko jakieś stuknięcie garnkiem albo zbicie szklanki. Na uczelni - gwar ludzi Na campusie - podobnie gwar ludzi, czasem jakieś krzyki emocji (szczególnie wieczorem) W sklepie/windzie/itp. - standardowa muzyka jaka leci w sklepach/windach/itp. Dialogi postaci Styl Undertale/Deltarune - podczas dialogów pojawia się box, w którym literka po literce pojawiają się zdania, każdej literce towarzyszy jakiś subtelny dźwięk. Dźwięki efektów interfejsu użytkownika Raczej brak, ewentualne subtelne swooshe albo piknięcia."
  },
  "gdd/opis_techniczny/opis_techniczny.html": {
    "href": "gdd/opis_techniczny/opis_techniczny.html",
    "title": "Opis Techniczny | Czasoport Documentation",
    "keywords": "Opis Techniczny Używany silnik graficzny Unity 2022.3.10f1 Język Programowania C# Użyte technologie ... Programy Potrzebne do Pracy na grą Unity, IDE, Photoshop, Ableton Live Trial Platformy wydania gry Windows, Linux, MacOS Jeśli pozwolą możliwości - Android Komunikacja sieciowa jeżeli jest Brak, multiplayer nie implementowany. Komunikacja z Bazą danych Brak, postęp zapisywany na cliencie."
  },
  "gdd/postacie_obiekty/postacie_obiekty.html": {
    "href": "gdd/postacie_obiekty/postacie_obiekty.html",
    "title": "Postacie i obiekty | Czasoport Documentation",
    "keywords": "Postacie i obiekty Postacie występujące w Grze (Ostateczny wygląd zależny od grafików, jednak stylizowany na życie studenckie) Protagonista - Imię do ustalenia Jaka jest jego rola Gracz i główny bohater opowieści. Historia Postaci Biedny student alkoholik, jeszcze nie wie co to studia, ale fajnie brzmi i rodzice kazali więc no... Płeć i wiek Mężczyna, 18 lat Ubiór Standardowy student - bluza lub koszula w kratę. Dziurawe skarpety, jeśli efekt ten będzie możliwy w pixelarcie. Współlokator - Imię do ustalenia Jaka jest jego rola Najlepszy przyjaciel Protagonisty, pomoc w trudnych chwilach, decyduje się na współudział w projekcie PIWO. Historia Postaci Podobnie jak Protagonista, po tygodniu studiów zastanawia się co on najlepszego zrobił decydując się na uczelnię wyższą - mógł przewracać kotlety w Maku, jednak jego rodzice nie byli zachwyceni tym pomysłem. Płeć i wiek Mężczyna, 18 lat Ubiór Podobnie jak Protagonista Reszta TBD Przedmioty Piwo \"138\" Klasyczek pośród klasyczków, pierwszy trunek wyprodukowany samodzielnie przez Protagonistę. Podobno zaspokaja cały głód, daje chwilową euforię i +10 do szczęścia."
  },
  "gdd/poziomy/poziomy.html": {
    "href": "gdd/poziomy/poziomy.html",
    "title": "Poziomy | Czasoport Documentation",
    "keywords": "Poziomy Przykładowe poziomy (Ostateczny wygląd zależny od grafików, jednak stylizowany na życie studenckie) Gra W zamyśle gra nie posiada poszczególnych poziomów, lecz sama w sobie jest jedynym poziomem. Rozbudowana mapa, podzielona na trzy sektory: akademik, kampus i budynki uczelni."
  },
  "gdd/rozgrywka/rozgrywka.html": {
    "href": "gdd/rozgrywka/rozgrywka.html",
    "title": "Rozgrywka | Czasoport Documentation",
    "keywords": "Rozgrywka Cel Gry Gra w zamyśle będzie miała kilka zakończeń, takich jak np. good ending - wytworzenie niebiańskiego trunku/odnalezienie zaklinacza, bad ending - powtórka akcji z zaklinaczem albo zaniedbanie studiów i wydalenie, real ending - urżnięcie się w trupa przez protagonistę. Na wersję demo planowane są na pewno real(najkrótsze) i good(główne) zakończenie. Progresja gry Życie studenta, jednak ulepszone o produkcję piwa. Taski (zarówno główne jak i poboczne) będą wymagały rozwiązywania coraz to trudniejszych zagadek i wciągnięcia się w fabułę, wszystko abu osiągnąć cel. Umiejętności Gracza Gracz nabywa umiejętności wraz ze zdobywaniem kolejnych notatek zaklinacza oraz praktyki craftingu. Mechanika Aby uważyć piwo gracz musi pozyskać wszystkie potrzebne przedmioty. Zadanie jest o tyle ciężkie, że do bardziej wymagających wyrobów składniki są trudne do zdobycia (np. trudne wymiany z innymi studentami lub wysoka cena w sklepie). Sam system craftingu też wymaga chwilę na oswojenie się z nim. Ulepszenie oraz Przedmioty Ulepszanie będzie polegać na samodzielnej naprawie klej pałą, szarą taśmą i na ślinę - jak na studenta przystało. Przedmioty będą dostępne np. w sklepach, u studentów, a te mniej wyszukane - w koszach na śmieci, na drzewach a nawet na ulicy. Kiedy następuje przegrana Gdy głód spadnie poniżej dopuszczalnego poziomu, gdy przeholujemy z promilami lub gdy zostaniemy pobici."
  },
  "index.html": {
    "href": "index.html",
    "title": "Nazwa Gry: Projekt PIWO:od zera do brewer'a | Czasoport Documentation",
    "keywords": "Nazwa Gry: Projekt PIWO:od zera do brewer'a Opis świata Gry Akcja rozgrywa się w 3 głównych lokalizacjach: pokój w akademiku - główne miejsce robienia piwa, jest to jedna klatka z pokoju z akademika z beczkami, składnikami, butelkami itd. kampus - miejsce w którym można pozyskać podstawowe surowce na robienie piwa, spotkać się z innymi studentami, dostać zamówienia, kupić akcesoria do robienia piwa budynki uczelni - miejsce side questów, \"zdobywania wiedzy\" i również pozysku surowców Główny Bohater Biedny student alkoholik, który jedyny cel jaki sobie wyznaczył na studiach to jakkolwiek zdać. Znaduje on niekompletny notatnik zaklinacza piwa i postanawia pójść w jego ślady. Z biegiem czasu uczy się jak tworzyć coraz to lepsze trunki, odnajdując kolejne brakujące strony pamiętnika oraz polegając na swoim doświadczeniu. Grafiki koncepcyjne Narazie brak :( Gatunek oraz Styl Gatunek - RPG z elementami łamigłówek, simulator Rodzaj Grafiki - 2D Widok - top-down poza pokojem, pierwszoosobowy w pokoju Mechanika wyróżniająca grę Zaawansowany system craftingu browara, uzwględniający planowanie do przodu i odkrywanie nowych kombinacji. Ukazanie perspektywy (nie)codziennego życia studenta. Używane Technologie Silnik: Unity 2022.3.10f1 Edytor Graficzny: Zależne od grafików Marketing oraz Monetyzacja Grupa Docelowa - Gen Z, studenci Monetyzacja - brak"
  },
  "manual/manuals/cinput-manual.html": {
    "href": "manual/manuals/cinput-manual.html",
    "title": "Custom Input System | Czasoport Documentation",
    "keywords": "Custom Input System"
  },
  "manual/tutorials-info/generating-docs.html": {
    "href": "manual/tutorials-info/generating-docs.html",
    "title": "Generating Documentation Manually | Czasoport Documentation",
    "keywords": "Generating Documentation Manually Project uses DocFX to generate documentation. GitHub will generate documentation automatically on each push to master branch. However, before merging branch you are currently working to master, it is recommended to generate documentation locally and check if everything is fine. Note Updating the documentation after making relevant changes is required by anyone working on the project. Installing DocFX Please follow steps described in section Create New Website in DocFX installation guide. Czasoport documentation structure Two important folders in Documentation folder are: manual and resources. Manual folder contains Markdown files, that are basically standalone articles published on the site. In order to add new article, create new .md file in one of the subfolders and add link to it in manual/toc.yml file. Structure of toc.yml file is self-explanatory. Resources folder contains images and other files that are used in articles. Folder structure should follow structure of manual folder, but resources for each article should be placed in additional folder with the name of the article. Please check how this picture of a cute cat is placed in the folders in order to understand how it works: ![Cute cat](~/resources/tutorials-info/generating-docs/cat.jpg)"
  },
  "manual/tutorials-info/workflow.html": {
    "href": "manual/tutorials-info/workflow.html",
    "title": "Workflow | Czasoport Documentation",
    "keywords": "Workflow Git Branches Pushes to master branch are protected. Each change, addition, hotfix etc. must be done on separate branch and then merged to master via pull request. Branch names must follow this pattern: type/short-description. For example: feature/adding-new-weapon. Available types are: feature - new addition, system, interaction, item, etc. bugfix - fixing a known bug, error, etc. hotfix - fixing a bug that is critical and needs to be fixed as soon as possible refactor - refactoring code, changing code structure, etc. documentation - adding new documentation, changing existing documentation, etc. spike - trying out new idea, testing new system, etc. short-description must be short, but descriptive. For example: feature/adding-new-weapon is good, but feature/weapon is not. Only kebab-case is allowed. Commits There are no enforced rules on commit messages, but please use descriptive ones. Pull Requests Please provide good name and at least short description of your pull request. If you are adding new feature, describe it as good as you can. If you are fixing a bug, describe what was the bug and how did you fix it. Pull Requests must be approved by at least one code owner. Code owners are automatically added to each pull request. Merge commits are disabled. Each pull request must be merged via squash and merge. Resolving conflicts If you are resolving conflicts, please use rebase instead of merge. This will keep commit history clean. If you are not sure how to do it, please ask for help. Pair programming If you are working on the same branch with someone else, please also use rebase instead of normal pull."
  }
}